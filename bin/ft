#!/bin/bash 

FT_DIR=".ftrack"
GIT_WORK_TREE="${FT_DIR}"
GIT_DIR="${FT_DIR}/.git"

FT_ROOT_DIR="${PWD}"
# set the inodes dir, possibly via env var
FT_INODES_DIR="${FT_INODES_DIR:-${FT_DIR}/inodes}"
FT_CHECK_FOR_DIR=0

export FT_DIR GIT_DIR GIT_WORK_TREE

ft-assert-dir(){
  if [[ ! -d "${FT_DIR}" ]]
  then
    # check pwd != FT_DIR
      echo "No .ftrack dir found here; you probably want to run 'ft init'"
    exit 1
  fi
}

ft-init(){
 
  # local thisdir="${PWD}"
  mkdir -p "${FT_INODES_DIR}"

  rinode=$( stat --printf '%i' "${PWD}" ) 
  firstfile="rootdir.${rinode}"
  echo "${PWD}" | tee "${FT_DIR}/${firstfile}" "${FT_INODES_DIR}/${rinode}"

  local gname="$( id -gn )"
  # mkdir -p .ftrack
  # cd "${FT_DIR}"
  git init 

  git config user.name  "${USER}"
  git config user.email "${USER}:${gname}"

  git config author.name  "${USER}"
  git config author.email "${USER}:${gname}"
  # echo ·$( realpath ${FT_DIR} )·
 
  git add "${firstfile}" inodes/
  git commit -m "You started tracking filenames in: ${FT_ROOT_DIR}!" . 
  # cd -
}



ft-add(){
  # set -x

  local -a finfo=()
  local rootdir=$( realpath "${FT_ROOT_DIR}" )
  if [[ -d ${FT_DIR} ]]
  then
    IFS=$'|' 
      while read -d '' inode pname
      do

        ofile="inodes/${inode}"
        # ( this should probs be a git-based check ;))
        # if an entry exists;       
        if [[ -f "${FT_DIR}/${ofile}" ]]
        then
          oname=$( cat "${FT_DIR}/${ofile}" )
          oname="${oname} ->"
        else
          oname="addding file:" 
        fi

        # new-name, ie. strip long basename part
        # and / or './'
        nname="${pname##${rootdir}/}"
        nname="${nname##./}"
       
        # save new name as contents of inode file
        echo -n "${nname}" >"${FT_DIR}/${ofile}"

        # record message using for commit message
        finfo+=("${oname} ${nname}\n")
        git add "${ofile}"

      done < <( find "${@}" -path './.ftrack' -prune -o \( -printf '%i|%p\0' \) )
    IFS=$' \t\n'
 
    # wierd newline issues passing to 'git commit -m' WIP
    git commit . -m "added name change" -m "$( echo -e ${finfo[@]} )" #"${ilist}"

  else
    ft-assert-dir
  fi
}

ft-statx(){
  # placeholder function
  # ft-statx --inode
  stat --printf '%i' "${2}"
}
ft-inode(){
  ft-statx --inode "${1}"
}

ft-status(){
# set -x
#
  inodesdir="inodes"
  ntfs=$( ls -1 "${FT_DIR}/${inodesdir}" | wc -l )
  if [[ ${#} -gt 0 ]]
  then
    inode=$( ft-inode "${1}" )
    ntgts=1
    ftgt="${inodesdir}/${inode}"
    ninfo="${ntgts}/${ntfs}"
  else
    ntgts=${ntfs}
    ftgt="${inodesdir}"
    ninfo="${ntgts}"
  fi

  echo -ne "ftrack:\n\n"
  echo -ne "  Loc: ${PWD}\n"
  echo -ne "  No. Of Tracked Files: ${ninfo}\n\n"

  # make while read loop; if working_name != last known file
  # here we are re-introducing the idea of working/staging/repo
  if [[ ${ntfs} -gt 0 ]]
  then
    cd "${FT_DIR}"
    grep -h . $( GIT_DIR=".git" git ls-files -- "${ftgt}" ) | sort -t':' -k 2 -V | sed -e 's/^/  /'
    echo
  fi
# set +x
}

ft-hist(){
  # for now get last name 
  if [[ -e "${1}"  ]]
  then
    inode=$( stat --printf '%i' "${1}" )
    # echo "·$1|$inode·"
    if [[ $( git ls-files --error-unmatch "inodes/${inode}" ) ]]
    then
      PAGER= git show $(git log --diff-filter=A --format='format:%h' -- inodes/"${inode}" ):inodes/"${inode}" 
    fi
    # git show $(git log --diff-filter=M -n 1 --format='format:%h' -- inodes/"${inode}" )~1:inodes/"${inode}" 
  fi
}

ft-git()(
  git "${@}"
)

# convenience method 
ft-move(){
  ft-add "${1}" &>/dev/null
  mv "${1}" "${2}"
  ft-add "${2}"
}

ft-rename(){
  #technically a revert as it grabs only first name
  # use git to manage state: use checkout, revert, etc
  oname=$( ft-hist "${1}" )
  mv -i "${1}" "${oname}"
  ft-add "${oname}"
}

ft(){

  local ftinit=1
  local ftcmd="${1}"; shift

  case "${ftcmd}" in
       init|i) ft-init   "${@}";;
        add|a) ft-add    "${@}";;
       hist|h) ft-hist   "${@}";;
    status|st) ft-status "${@}";;
    rename|re) ft-rename "${@}";;
      move|mv) ft-move   "${@}";;
        git|g) ft-git    "${@}";;
       *) echo 'usage: tf [init|add]';;
  esac

  # echo "·${#}: ${@}·"
}

ft "${@}"
